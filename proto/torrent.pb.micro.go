// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: torrent.proto

package proto

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for TorrentService service

type TorrentService interface {
	// Application RPC methods
	ApplicationVersion(ctx context.Context, in *TorrentEmpty, opts ...client.CallOption) (*TorrentResponse, error)
	ApplicationAPIVersion(ctx context.Context, in *TorrentEmpty, opts ...client.CallOption) (*TorrentResponse, error)
	ApplicationBuildInformation(ctx context.Context, in *TorrentEmpty, opts ...client.CallOption) (*TorrentResponse, error)
	ApplicationPreferences(ctx context.Context, in *TorrentEmpty, opts ...client.CallOption) (*TorrentResponse, error)
	// Log RPC methods
	LogEntries(ctx context.Context, in *TorrentOptions, opts ...client.CallOption) (*TorrentResponse, error)
	// Torrents RPC methods
	TorrentList(ctx context.Context, in *TorrentEmpty, opts ...client.CallOption) (*TorrentResponse, error)
	TorrentProperties(ctx context.Context, in *TorrentString, opts ...client.CallOption) (*TorrentResponse, error)
	TorrentTrackers(ctx context.Context, in *TorrentString, opts ...client.CallOption) (*TorrentResponse, error)
	TorrentContents(ctx context.Context, in *TorrentString, opts ...client.CallOption) (*TorrentResponse, error)
	TorrentPiecesState(ctx context.Context, in *TorrentString, opts ...client.CallOption) (*TorrentResponse, error)
	TorrentPiecesHashes(ctx context.Context, in *TorrentString, opts ...client.CallOption) (*TorrentResponse, error)
	TorrentPause(ctx context.Context, in *TorrentStrings, opts ...client.CallOption) (*TorrentEmpty, error)
	TorrentResume(ctx context.Context, in *TorrentStrings, opts ...client.CallOption) (*TorrentEmpty, error)
	TorrentDelete(ctx context.Context, in *TorrentStrings, opts ...client.CallOption) (*TorrentEmpty, error)
	TorrentDeleteWithFiles(ctx context.Context, in *TorrentStrings, opts ...client.CallOption) (*TorrentEmpty, error)
	TorrentReCheck(ctx context.Context, in *TorrentStrings, opts ...client.CallOption) (*TorrentEmpty, error)
	TorrentReAnnounce(ctx context.Context, in *TorrentStrings, opts ...client.CallOption) (*TorrentEmpty, error)
	TorrentIncreasePriority(ctx context.Context, in *TorrentStrings, opts ...client.CallOption) (*TorrentEmpty, error)
	TorrentDecreasePriority(ctx context.Context, in *TorrentStrings, opts ...client.CallOption) (*TorrentEmpty, error)
	TorrentSetHighestPriority(ctx context.Context, in *TorrentStrings, opts ...client.CallOption) (*TorrentEmpty, error)
	TorrentSetLowestPriority(ctx context.Context, in *TorrentStrings, opts ...client.CallOption) (*TorrentEmpty, error)
	TorrentSetFilePriority(ctx context.Context, in *TorrentFilesPriority, opts ...client.CallOption) (*TorrentEmpty, error)
}

type torrentService struct {
	c    client.Client
	name string
}

func NewTorrentService(name string, c client.Client) TorrentService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "proto"
	}
	return &torrentService{
		c:    c,
		name: name,
	}
}

func (c *torrentService) ApplicationVersion(ctx context.Context, in *TorrentEmpty, opts ...client.CallOption) (*TorrentResponse, error) {
	req := c.c.NewRequest(c.name, "TorrentService.ApplicationVersion", in)
	out := new(TorrentResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *torrentService) ApplicationAPIVersion(ctx context.Context, in *TorrentEmpty, opts ...client.CallOption) (*TorrentResponse, error) {
	req := c.c.NewRequest(c.name, "TorrentService.ApplicationAPIVersion", in)
	out := new(TorrentResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *torrentService) ApplicationBuildInformation(ctx context.Context, in *TorrentEmpty, opts ...client.CallOption) (*TorrentResponse, error) {
	req := c.c.NewRequest(c.name, "TorrentService.ApplicationBuildInformation", in)
	out := new(TorrentResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *torrentService) ApplicationPreferences(ctx context.Context, in *TorrentEmpty, opts ...client.CallOption) (*TorrentResponse, error) {
	req := c.c.NewRequest(c.name, "TorrentService.ApplicationPreferences", in)
	out := new(TorrentResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *torrentService) LogEntries(ctx context.Context, in *TorrentOptions, opts ...client.CallOption) (*TorrentResponse, error) {
	req := c.c.NewRequest(c.name, "TorrentService.LogEntries", in)
	out := new(TorrentResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *torrentService) TorrentList(ctx context.Context, in *TorrentEmpty, opts ...client.CallOption) (*TorrentResponse, error) {
	req := c.c.NewRequest(c.name, "TorrentService.TorrentList", in)
	out := new(TorrentResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *torrentService) TorrentProperties(ctx context.Context, in *TorrentString, opts ...client.CallOption) (*TorrentResponse, error) {
	req := c.c.NewRequest(c.name, "TorrentService.TorrentProperties", in)
	out := new(TorrentResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *torrentService) TorrentTrackers(ctx context.Context, in *TorrentString, opts ...client.CallOption) (*TorrentResponse, error) {
	req := c.c.NewRequest(c.name, "TorrentService.TorrentTrackers", in)
	out := new(TorrentResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *torrentService) TorrentContents(ctx context.Context, in *TorrentString, opts ...client.CallOption) (*TorrentResponse, error) {
	req := c.c.NewRequest(c.name, "TorrentService.TorrentContents", in)
	out := new(TorrentResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *torrentService) TorrentPiecesState(ctx context.Context, in *TorrentString, opts ...client.CallOption) (*TorrentResponse, error) {
	req := c.c.NewRequest(c.name, "TorrentService.TorrentPiecesState", in)
	out := new(TorrentResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *torrentService) TorrentPiecesHashes(ctx context.Context, in *TorrentString, opts ...client.CallOption) (*TorrentResponse, error) {
	req := c.c.NewRequest(c.name, "TorrentService.TorrentPiecesHashes", in)
	out := new(TorrentResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *torrentService) TorrentPause(ctx context.Context, in *TorrentStrings, opts ...client.CallOption) (*TorrentEmpty, error) {
	req := c.c.NewRequest(c.name, "TorrentService.TorrentPause", in)
	out := new(TorrentEmpty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *torrentService) TorrentResume(ctx context.Context, in *TorrentStrings, opts ...client.CallOption) (*TorrentEmpty, error) {
	req := c.c.NewRequest(c.name, "TorrentService.TorrentResume", in)
	out := new(TorrentEmpty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *torrentService) TorrentDelete(ctx context.Context, in *TorrentStrings, opts ...client.CallOption) (*TorrentEmpty, error) {
	req := c.c.NewRequest(c.name, "TorrentService.TorrentDelete", in)
	out := new(TorrentEmpty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *torrentService) TorrentDeleteWithFiles(ctx context.Context, in *TorrentStrings, opts ...client.CallOption) (*TorrentEmpty, error) {
	req := c.c.NewRequest(c.name, "TorrentService.TorrentDeleteWithFiles", in)
	out := new(TorrentEmpty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *torrentService) TorrentReCheck(ctx context.Context, in *TorrentStrings, opts ...client.CallOption) (*TorrentEmpty, error) {
	req := c.c.NewRequest(c.name, "TorrentService.TorrentReCheck", in)
	out := new(TorrentEmpty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *torrentService) TorrentReAnnounce(ctx context.Context, in *TorrentStrings, opts ...client.CallOption) (*TorrentEmpty, error) {
	req := c.c.NewRequest(c.name, "TorrentService.TorrentReAnnounce", in)
	out := new(TorrentEmpty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *torrentService) TorrentIncreasePriority(ctx context.Context, in *TorrentStrings, opts ...client.CallOption) (*TorrentEmpty, error) {
	req := c.c.NewRequest(c.name, "TorrentService.TorrentIncreasePriority", in)
	out := new(TorrentEmpty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *torrentService) TorrentDecreasePriority(ctx context.Context, in *TorrentStrings, opts ...client.CallOption) (*TorrentEmpty, error) {
	req := c.c.NewRequest(c.name, "TorrentService.TorrentDecreasePriority", in)
	out := new(TorrentEmpty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *torrentService) TorrentSetHighestPriority(ctx context.Context, in *TorrentStrings, opts ...client.CallOption) (*TorrentEmpty, error) {
	req := c.c.NewRequest(c.name, "TorrentService.TorrentSetHighestPriority", in)
	out := new(TorrentEmpty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *torrentService) TorrentSetLowestPriority(ctx context.Context, in *TorrentStrings, opts ...client.CallOption) (*TorrentEmpty, error) {
	req := c.c.NewRequest(c.name, "TorrentService.TorrentSetLowestPriority", in)
	out := new(TorrentEmpty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *torrentService) TorrentSetFilePriority(ctx context.Context, in *TorrentFilesPriority, opts ...client.CallOption) (*TorrentEmpty, error) {
	req := c.c.NewRequest(c.name, "TorrentService.TorrentSetFilePriority", in)
	out := new(TorrentEmpty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for TorrentService service

type TorrentServiceHandler interface {
	// Application RPC methods
	ApplicationVersion(context.Context, *TorrentEmpty, *TorrentResponse) error
	ApplicationAPIVersion(context.Context, *TorrentEmpty, *TorrentResponse) error
	ApplicationBuildInformation(context.Context, *TorrentEmpty, *TorrentResponse) error
	ApplicationPreferences(context.Context, *TorrentEmpty, *TorrentResponse) error
	// Log RPC methods
	LogEntries(context.Context, *TorrentOptions, *TorrentResponse) error
	// Torrents RPC methods
	TorrentList(context.Context, *TorrentEmpty, *TorrentResponse) error
	TorrentProperties(context.Context, *TorrentString, *TorrentResponse) error
	TorrentTrackers(context.Context, *TorrentString, *TorrentResponse) error
	TorrentContents(context.Context, *TorrentString, *TorrentResponse) error
	TorrentPiecesState(context.Context, *TorrentString, *TorrentResponse) error
	TorrentPiecesHashes(context.Context, *TorrentString, *TorrentResponse) error
	TorrentPause(context.Context, *TorrentStrings, *TorrentEmpty) error
	TorrentResume(context.Context, *TorrentStrings, *TorrentEmpty) error
	TorrentDelete(context.Context, *TorrentStrings, *TorrentEmpty) error
	TorrentDeleteWithFiles(context.Context, *TorrentStrings, *TorrentEmpty) error
	TorrentReCheck(context.Context, *TorrentStrings, *TorrentEmpty) error
	TorrentReAnnounce(context.Context, *TorrentStrings, *TorrentEmpty) error
	TorrentIncreasePriority(context.Context, *TorrentStrings, *TorrentEmpty) error
	TorrentDecreasePriority(context.Context, *TorrentStrings, *TorrentEmpty) error
	TorrentSetHighestPriority(context.Context, *TorrentStrings, *TorrentEmpty) error
	TorrentSetLowestPriority(context.Context, *TorrentStrings, *TorrentEmpty) error
	TorrentSetFilePriority(context.Context, *TorrentFilesPriority, *TorrentEmpty) error
}

func RegisterTorrentServiceHandler(s server.Server, hdlr TorrentServiceHandler, opts ...server.HandlerOption) error {
	type torrentService interface {
		ApplicationVersion(ctx context.Context, in *TorrentEmpty, out *TorrentResponse) error
		ApplicationAPIVersion(ctx context.Context, in *TorrentEmpty, out *TorrentResponse) error
		ApplicationBuildInformation(ctx context.Context, in *TorrentEmpty, out *TorrentResponse) error
		ApplicationPreferences(ctx context.Context, in *TorrentEmpty, out *TorrentResponse) error
		LogEntries(ctx context.Context, in *TorrentOptions, out *TorrentResponse) error
		TorrentList(ctx context.Context, in *TorrentEmpty, out *TorrentResponse) error
		TorrentProperties(ctx context.Context, in *TorrentString, out *TorrentResponse) error
		TorrentTrackers(ctx context.Context, in *TorrentString, out *TorrentResponse) error
		TorrentContents(ctx context.Context, in *TorrentString, out *TorrentResponse) error
		TorrentPiecesState(ctx context.Context, in *TorrentString, out *TorrentResponse) error
		TorrentPiecesHashes(ctx context.Context, in *TorrentString, out *TorrentResponse) error
		TorrentPause(ctx context.Context, in *TorrentStrings, out *TorrentEmpty) error
		TorrentResume(ctx context.Context, in *TorrentStrings, out *TorrentEmpty) error
		TorrentDelete(ctx context.Context, in *TorrentStrings, out *TorrentEmpty) error
		TorrentDeleteWithFiles(ctx context.Context, in *TorrentStrings, out *TorrentEmpty) error
		TorrentReCheck(ctx context.Context, in *TorrentStrings, out *TorrentEmpty) error
		TorrentReAnnounce(ctx context.Context, in *TorrentStrings, out *TorrentEmpty) error
		TorrentIncreasePriority(ctx context.Context, in *TorrentStrings, out *TorrentEmpty) error
		TorrentDecreasePriority(ctx context.Context, in *TorrentStrings, out *TorrentEmpty) error
		TorrentSetHighestPriority(ctx context.Context, in *TorrentStrings, out *TorrentEmpty) error
		TorrentSetLowestPriority(ctx context.Context, in *TorrentStrings, out *TorrentEmpty) error
		TorrentSetFilePriority(ctx context.Context, in *TorrentFilesPriority, out *TorrentEmpty) error
	}
	type TorrentService struct {
		torrentService
	}
	h := &torrentServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&TorrentService{h}, opts...))
}

type torrentServiceHandler struct {
	TorrentServiceHandler
}

func (h *torrentServiceHandler) ApplicationVersion(ctx context.Context, in *TorrentEmpty, out *TorrentResponse) error {
	return h.TorrentServiceHandler.ApplicationVersion(ctx, in, out)
}

func (h *torrentServiceHandler) ApplicationAPIVersion(ctx context.Context, in *TorrentEmpty, out *TorrentResponse) error {
	return h.TorrentServiceHandler.ApplicationAPIVersion(ctx, in, out)
}

func (h *torrentServiceHandler) ApplicationBuildInformation(ctx context.Context, in *TorrentEmpty, out *TorrentResponse) error {
	return h.TorrentServiceHandler.ApplicationBuildInformation(ctx, in, out)
}

func (h *torrentServiceHandler) ApplicationPreferences(ctx context.Context, in *TorrentEmpty, out *TorrentResponse) error {
	return h.TorrentServiceHandler.ApplicationPreferences(ctx, in, out)
}

func (h *torrentServiceHandler) LogEntries(ctx context.Context, in *TorrentOptions, out *TorrentResponse) error {
	return h.TorrentServiceHandler.LogEntries(ctx, in, out)
}

func (h *torrentServiceHandler) TorrentList(ctx context.Context, in *TorrentEmpty, out *TorrentResponse) error {
	return h.TorrentServiceHandler.TorrentList(ctx, in, out)
}

func (h *torrentServiceHandler) TorrentProperties(ctx context.Context, in *TorrentString, out *TorrentResponse) error {
	return h.TorrentServiceHandler.TorrentProperties(ctx, in, out)
}

func (h *torrentServiceHandler) TorrentTrackers(ctx context.Context, in *TorrentString, out *TorrentResponse) error {
	return h.TorrentServiceHandler.TorrentTrackers(ctx, in, out)
}

func (h *torrentServiceHandler) TorrentContents(ctx context.Context, in *TorrentString, out *TorrentResponse) error {
	return h.TorrentServiceHandler.TorrentContents(ctx, in, out)
}

func (h *torrentServiceHandler) TorrentPiecesState(ctx context.Context, in *TorrentString, out *TorrentResponse) error {
	return h.TorrentServiceHandler.TorrentPiecesState(ctx, in, out)
}

func (h *torrentServiceHandler) TorrentPiecesHashes(ctx context.Context, in *TorrentString, out *TorrentResponse) error {
	return h.TorrentServiceHandler.TorrentPiecesHashes(ctx, in, out)
}

func (h *torrentServiceHandler) TorrentPause(ctx context.Context, in *TorrentStrings, out *TorrentEmpty) error {
	return h.TorrentServiceHandler.TorrentPause(ctx, in, out)
}

func (h *torrentServiceHandler) TorrentResume(ctx context.Context, in *TorrentStrings, out *TorrentEmpty) error {
	return h.TorrentServiceHandler.TorrentResume(ctx, in, out)
}

func (h *torrentServiceHandler) TorrentDelete(ctx context.Context, in *TorrentStrings, out *TorrentEmpty) error {
	return h.TorrentServiceHandler.TorrentDelete(ctx, in, out)
}

func (h *torrentServiceHandler) TorrentDeleteWithFiles(ctx context.Context, in *TorrentStrings, out *TorrentEmpty) error {
	return h.TorrentServiceHandler.TorrentDeleteWithFiles(ctx, in, out)
}

func (h *torrentServiceHandler) TorrentReCheck(ctx context.Context, in *TorrentStrings, out *TorrentEmpty) error {
	return h.TorrentServiceHandler.TorrentReCheck(ctx, in, out)
}

func (h *torrentServiceHandler) TorrentReAnnounce(ctx context.Context, in *TorrentStrings, out *TorrentEmpty) error {
	return h.TorrentServiceHandler.TorrentReAnnounce(ctx, in, out)
}

func (h *torrentServiceHandler) TorrentIncreasePriority(ctx context.Context, in *TorrentStrings, out *TorrentEmpty) error {
	return h.TorrentServiceHandler.TorrentIncreasePriority(ctx, in, out)
}

func (h *torrentServiceHandler) TorrentDecreasePriority(ctx context.Context, in *TorrentStrings, out *TorrentEmpty) error {
	return h.TorrentServiceHandler.TorrentDecreasePriority(ctx, in, out)
}

func (h *torrentServiceHandler) TorrentSetHighestPriority(ctx context.Context, in *TorrentStrings, out *TorrentEmpty) error {
	return h.TorrentServiceHandler.TorrentSetHighestPriority(ctx, in, out)
}

func (h *torrentServiceHandler) TorrentSetLowestPriority(ctx context.Context, in *TorrentStrings, out *TorrentEmpty) error {
	return h.TorrentServiceHandler.TorrentSetLowestPriority(ctx, in, out)
}

func (h *torrentServiceHandler) TorrentSetFilePriority(ctx context.Context, in *TorrentFilesPriority, out *TorrentEmpty) error {
	return h.TorrentServiceHandler.TorrentSetFilePriority(ctx, in, out)
}
